name: CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
        
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 1.11
        
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
        
    - name: Cache SonarCloud packages
      uses: actions/cache@v1
      with:
        path: ~\sonar\cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Cache SonarCloud scanner
      id: cache-sonar-scanner
      uses: actions/cache@v1
      with:
        path: ./MusiX\.sonar\scanner
        key: ${{ runner.os }}-sonar-scanner
        restore-keys: ${{ runner.os }}-sonar-scanner

    - name: Install SonarCloud scanner
      if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      shell: powershell
      run: |
        New-Item -Path ./MusiX\.sonar\scanner -ItemType Directory
        dotnet tool update --global dotnet-sonarscanner
        
    - name: Build and analyze
      id: build_and_analyze
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      shell: powershell
      run: |
        dotnet tool install --global dotnet-sonarscanner
        dotnet sonarscanner begin /k:"MusiX-Fontys_MusiX-BackEnd" /o:"musix-fontys" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}"
        dotnet build ./MusiX
        dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
        
  deploy:
    runs-on: windows-latest
    needs: [build]
    
    steps:
    - name: Get Current Branch
      id: get_branch
      shell: bash
      run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
      
    - name: Build Docker-Compose
      run: docker-compose up --build ./MusiX/API
      
    #- name: Login in to DockerHub
    #  if: steps.get_branch.outputs.branch == 'main'
    #  uses: docker/login-action@v1
    #  with:
    #    username: ${{ secrets.DOCKER_HUB_USERNAME }}
    #    password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
        
    #- name: Set up Docker Buildx
    #  if: steps.get_branch.outputs.branch == 'main'
    #  uses: docker/setup-buildx-action@v1

    #- name: Build and push
    #  if: steps.get_branch.outputs.branch == 'main'
    #  uses: docker/build-push-action@v2
    #  with:
    #    context: .
    #    file: ./Dockerfile
    #    push: true
    #    tags: ${{ secrets.DOCKER_HUB_USERNAME }}/simplewhale:latest
    
